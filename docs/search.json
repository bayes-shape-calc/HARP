[
  {
    "objectID": "example1.html",
    "href": "example1.html",
    "title": "Load Data",
    "section": "",
    "text": "Here’s a code example\nimport harp\n\n\nfile_cif = 'your_molecule.cif'\nfile_mrc = 'your_map.mrc'\n\nmol = harp.molecule.load(file_cif,False)\ngrid,density = harp.density.load(file_map)"
  },
  {
    "objectID": "info_priors.html",
    "href": "info_priors.html",
    "title": "Priors",
    "section": "",
    "text": "Here’s some info on priors"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to HARP",
    "section": "",
    "text": "Learn how HARP can help you evaluate cryoEM maps and models.\n\nHARP is an ongoing project based out of the Kinz-Thompson lab at Rutgers University-Newark"
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installing HARP",
    "section": "",
    "text": "New Python Environment\nconda stuff\n\n\nInstall package\npip install -e ./"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About HARP",
    "section": "",
    "text": "Hierarchical Atomic Resolution Perception (HARP) is a Python package for the evaluation of local atomic resolution in a cryoEM map and for the estimation of map-to-model validation of the corresponding atomic structural model. HARP calculates the atomic resolution of the cryoEM map at the level of resides using the framework of hierarchical resolution, through a comparison between atomic level models and residue-level models.\n\nHARP utilizes a mathematical framework to describe the latent structural information in a noisy dataset (described in Ray, et al.).\n\nCiting HARP\nIf you use HARP in your work, please cite:\n[Link goes here]\n\n\nDevelopers\n\nColin Kinz-Thompson   \nKorak Ray"
  },
  {
    "objectID": "info_density.html",
    "href": "info_density.html",
    "title": "Density maps",
    "section": "",
    "text": "The experimental density map for a cryoEM experiment itself corresponds to a 3-D numpy.ndarray that contains the value of the density at different voxels. It is the location of the voxels themselves that encodes how these density values map onto the spatial information of the biomolecule. This information on the grid of the density map is stored in a separate class (gridclass) in HARP."
  },
  {
    "objectID": "info_molecule.html",
    "href": "info_molecule.html",
    "title": "Molecules",
    "section": "",
    "text": "This page describes how how molecular models are handled in HARP."
  },
  {
    "objectID": "info_molecule.html#input",
    "href": "info_molecule.html#input",
    "title": "Molecules",
    "section": "Input",
    "text": "Input\n\nfname [string] is the filename of the .cif file to load. This function currently only handles files ending in .mmcif, .cif, or .cif.gz\nonly_polymers [bool] is a flag for whether to only use entities labeled as polymers (e.g., things that aren’t water, or ions, or metals, or ligands, etc.).\nfirstmodel [bool] is a flag for whether to take the first model. Useful for an ensemble of models (e.g., as from NMR).\nauthid [bool] is a flag for whether to use authid as atomcollection.resid or not. Useful for when people populate the wrong column (e.g., when model building)."
  },
  {
    "objectID": "info_molecule.html#output",
    "href": "info_molecule.html#output",
    "title": "Molecules",
    "section": "Output",
    "text": "Output\n\nan atomcollection holding the molecular model"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Here is some documentation/cookbook examples about how to use the Hierarchical Atomic Resolution Perception (HARP) package."
  },
  {
    "objectID": "somestuff.html",
    "href": "somestuff.html",
    "title": "Some Stuff",
    "section": "",
    "text": "placeholder"
  },
  {
    "objectID": "info_bms.html",
    "href": "info_bms.html",
    "title": "Bayesian Model Selection",
    "section": "",
    "text": "HARP executes Bayesian model selection (BMS) between an atomic level model (\\(M_0\\)) and a residue level model (\\(M_1\\)) to compute the probability, \\(P(M_0 | \\mathcal{Y})\\), where \\(\\mathcal{Y}\\) is the local cryoEM map for a residue., according to\n\\[\nP(M_0 | \\mathcal{Y}) = \\frac{P(\\mathcal{Y} | M_0) P(M_0)}{P(\\mathcal{Y} | M_0) P(M_0) + P(\\mathcal{Y} | M_1) P(M_1)}\n\\] where the priors \\(P(M_0) = P(M_1) = \\frac{1}{2}\\), and \\(P(\\mathcal{Y} | M_0)\\) and \\(P(\\mathcal{Y} | M_1)\\) are the likelihoods that the latent structural information in \\(\\mathcal{Y}\\) is explained by an atomic level template (for \\(M_0\\)) or a residue level template (for \\(M_1\\)), according to Equation 2.2.2. in Ray, et al."
  },
  {
    "objectID": "info_bms.html#input",
    "href": "info_bms.html#input",
    "title": "Bayesian Model Selection",
    "section": "Input",
    "text": "Input\n(grid, data, mol, adfs = None, blobs = None, subgrid_size=8., sigmacutoff=5, offset=.5, emit=print, chains=None, atom_types=None, atom_weights=None)"
  },
  {
    "objectID": "info_bms.html#output",
    "href": "info_bms.html#output",
    "title": "Bayesian Model Selection",
    "section": "Output",
    "text": "Output\n(record_prob_good, record_ln_ev)"
  },
  {
    "objectID": "info_bms.html#input-1",
    "href": "info_bms.html#input-1",
    "title": "Bayesian Model Selection",
    "section": "Input",
    "text": "Input\n(grid, data, mol, adfs = None, blobs = None, subgrid_size=8., sigmacutoff=5, offset=.5, emit=print, chains=None, atom_types=None, atom_weights=None)"
  },
  {
    "objectID": "info_bms.html#output-1",
    "href": "info_bms.html#output-1",
    "title": "Bayesian Model Selection",
    "section": "Output",
    "text": "Output\n(record_prob_good,record_ln_ev)"
  },
  {
    "objectID": "info_density.html#attributes",
    "href": "info_density.html#attributes",
    "title": "Density maps",
    "section": "",
    "text": "self.origin [double] (3) is the lower corner of the grid\nself.dxyz [double] (3) is the rectilinear spacing between each grid point\nself.nxyz [double] (3) is the number of grid points in each direction"
  },
  {
    "objectID": "info_density.html#functions",
    "href": "info_density.html#functions",
    "title": "Density maps",
    "section": "Functions",
    "text": "Functions\n\nself.xyzmin() -&gt; np.ndarray (3) [double]\nself.xyzmax() -&gt; np.ndarray (3) [double]\nself.com() -&gt; np.ndarray (3) [double]\nself.grid_ijk() -&gt; gi,gj,gk are all np.ndarray (nx,ny,nz) [int]\nself.grid_xyz() -&gt; gx,gy,gz are all np.ndarray (nx,ny,nz) [double]"
  },
  {
    "objectID": "info_molecule.html#attributes",
    "href": "info_molecule.html#attributes",
    "title": "Molecules",
    "section": "",
    "text": "These follow the pdb naming convention\n\nself.atomid [int] (natoms) is a number id to find particular atoms\nself.resid [int] (natoms) is the residue ID that the atom is part of\nself.resname [string] (natoms) is the name of the residue (gly, ala etc…)\nself.atomname [string] (natoms) is CA CB N, etc…\nself.chain [string](natoms) is the chain …\nself.element [string] (natoms) is (CNOFH etc..)\nself.conf [...?] (natoms)\nself.xyz [double] (natoms,3) is cartesian coordinates… must be a double!\nself.occupancy [double] (natoms)\nself.bfactor [double] (natoms)\nself.hetatom [bool] (natoms) is boolean for whether it is a heteroatom entry or not\nself.modelnum [...?] (natoms)\nself.shift [...] (3)\nself.authresid [int] (natoms) is author resid, or if not provided will default to resid\nself.ind [int] (natoms)\nself.natoms [int]\nself.unique_residues [int] (&lt;nres)\nself.unique_chains [string] (nchains)\nself.unique_confs [...?] (nconfs)"
  },
  {
    "objectID": "info_molecule.html#functions",
    "href": "info_molecule.html#functions",
    "title": "Molecules",
    "section": "Functions",
    "text": "Functions\n\nself.get_residue(number) - number [int] -&gt; atomcollection\nself.get_chain(chain) - chain [string] -&gt; atomcollection\nself.get_chains(chains) - chains [np.ndarray/list] -&gt; atomcollection\nself.get_atomname(atomname) - atomname [string] -&gt; atomcollection\nself.dehydrogen() - -&gt; atomcollection\nself.get_atomids(atomids) - atomids [np,ndarray/list] -&gt; atomcollection\nself.get_conformation(conf) - conf […?] -&gt; atomcollection\nself.remove_hetatoms() - -&gt; atomcollection\nself.split_residue() - -&gt; atomcollection\nself.com() - -&gt; np.ndarray (3) with mean of self.xyz"
  },
  {
    "objectID": "info_bms.html#bms_molecule",
    "href": "info_bms.html#bms_molecule",
    "title": "Bayesian Model Selection",
    "section": "bms_molecule",
    "text": "bms_molecule\nharp.bayes_model_select.bms_molecule (grid, data, mol, adfs = None, blobs = None, subgrid_size = 8., sigmacutoff = 5, offset= 0.5, emit = print, chains = None, atom_types = None, atom_weights = None)\nThis function runs the HARP calculation for a specific molecular model by calling bms_residue (see above) in a loop for all the residues in all the chains of the molecule.\nReturns a tuple of (record_prob_good, record_ln_ev).\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\nharp.molecule.gridclass  The grid defining the voxel locations for a density map.\n\n\ndata\nnumpy.ndarray  The experimental cryoEM density map for a molecule.\n\n\nmol\nharp.molecule.atomcollection  The collection of atoms that correspond to the molecule.\n\n\nadfs\nnumpy.ndarray  A 1-D array of Gaussian width \\(\\sigma_0\\) (in \\(\\unicode{x212B}\\)) for the atomic profiles in \\(M_0\\). The default is an array of 10 \\(\\log_{10}\\)-spaced points points between 0.25 and 1.0.\n\n\nblobs\nnumpy.ndarray  A 1-D array of Gaussian width \\(\\sigma_1\\) (in \\(\\unicode{x212B}\\)) for the residue super-atom profiles in \\(M_1\\). The default is an array of 20 \\(\\log_{10}\\)-spaced points points between 0.25 and 2.8.\n\n\nsubgrid_size\nfloat  The size of the cubic subgrid (in \\(\\unicode{x212B}\\)) from the residue center-of-mass that defines the local cryoEM density map for the residue. The default value is 8.0.\n\n\nsigmacuttoff\nfloat  The cutoff distance (in terms of \\(\\sigma\\)) from the position of each atom (or superatom) that the template is calculated up to. The default value is 5.\n\n\noffset\nfloat  The offset from the grid voxel edge (in terms of grid voxel size) where the integrated template for the density for that voxel is assigned. The default value is 0.5.\n\n\nemit\nPython function  The function which determines how the HARP result will be displayes. Default is print.\n\n\nchains\nnumpy.ndarray  A 1-D array of strings specifying the chains of the molecule the HARP calculation is executed for. The default is None, which corresponds to the calculation being run for all chains.\n\n\natom_types\nnumpy.ndarray  A 1-D array of strings for the elements present in a residue. The default is ['H', 'C', 'N', 'O', 'P', 'S'].\n\n\natom_weights\nnumpy.ndarray  A 1-D array of elements-wise weights, normalized to C, in the same order as atom_types. The default is [0.05, 1., 1., 1., 2., 2.].\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\nrecord_prob_good\nnumpy.ndarray  A 1-D array of the same size as the number of atoms in the molecule, containing the probability \\(P(M_0| \\mathcal{Y})\\) for each residue in the molecule.  Note: Every atom of a particular residue has the same probability value.\n\n\nrecord_ln_ev\nnumpy.ndarray  A 2-D array whose size in the first dimension is equal to the number of atoms in the molecule and second dimension is (adfs.size + blobs.size), containing the log-probabilities, \\(\\log P ({\\mathcal{Y}|M_n})\\), for each residue in the molecule. record_ln_ev[:, :adfs.size] contains the log-probabilites for each \\(\\sigma_0\\) in adfs and record_ln_ev[:, adfs.size:] contains the log-probabilites for each \\(\\sigma_1\\) in blobs.  Note: Every atom i of a particular residue has the same record_ln_ev[i, :]."
  },
  {
    "objectID": "info_bms.html#bms_residue",
    "href": "info_bms.html#bms_residue",
    "title": "Bayesian Model Selection",
    "section": "bms_residue",
    "text": "bms_residue\nharp.bayes_model_select.bms_residue (grid, data, subresidue, adfs, blobs, subgrid_size=8., sigmacutoff=5, offset=0.5, atom_types=None, atom_weights=None)\nThis function runs the HARP calculation at the local residue-level by executing BMS between \\(M_0\\) and \\(M_1\\) for a single residue of the cryoEM structure. This function is typically called by bms_molecule (see below), and therefore, it is unlikely to be independently used.\nReturns a tuple of (record_prob_good, record_ln_ev).\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\nharp.molecule.gridclass  The grid defining the voxel locations for a density map.\n\n\ndata\nnumpy.ndarray  The experimental cryoEM density map for a molecule.\n\n\nsubresidue\nharp.molecule.atomcollection  The collection of atoms that correspond to the specific residue.\n\n\nadfs\nnumpy.ndarray  A 1-D array of Gaussian width \\(\\sigma_0\\) (in \\(\\unicode{x212B}\\)) for the atomic profiles in \\(M_0\\). The default is an array of 10 \\(\\log_{10}\\)-spaced points points between 0.25 and 1.0.\n\n\nblobs\nnumpy.ndarray  A 1-D array of Gaussian width \\(\\sigma_1\\) (in \\(\\unicode{x212B}\\)) for the residue super-atom profiles in \\(M_1\\). The default is an array of 20 \\(\\log_{10}\\)-spaced points points between 0.25 and 2.8.\n\n\nsubgrid_size\nfloat  The size of the cubic subgrid (in \\(\\unicode{x212B}\\)) from the residue center-of-mass that defines the local cryoEM density map for the residue. The default value is 8.0.\n\n\nsigmacuttoff\nfloat  The cutoff distance (in terms of \\(\\sigma\\)) from the position of each atom (or superatom) that the template is calculated up to. The default value is 5.\n\n\noffset\nfloat  The offset from the grid voxel edge (in terms of grid voxel size) where the integrated template for the density for that voxel is assigned. The default value is 0.5.\n\n\natom_types\nnumpy.ndarray  A 1-D array of strings for the elements present in a residue. The default is ['H', 'C', 'N', 'O', 'P', 'S'].\n\n\natom_weights\nnumpy.ndarray  A 1-D array of elements-wise weights, normalized to C, in the same order as atom_types. The default is [0.05, 1., 1., 1., 2., 2.].\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\nrecord_prob_good\nnumpy.ndarray  A 1-D array of the same size as the number of atoms in the residue, containing the probability \\(P(M_0| \\mathcal{Y})\\) for a specific residue.  Note: Every element of the array contains the same probability value which is evaluated for the entire residue. This value is assigned to each atom of the residue.\n\n\nrecord_ln_ev\nnumpy.ndarray  A 2-D array whose size in the first dimension is equal to the number of atoms in the residue and second dimension is (adfs.size + blobs.size), containing the log-probabilities, \\(\\log P ({\\mathcal{Y}|M_n})\\), for the specific residue. record_ln_ev[:, :adfs.size] contains the log-probabilites for each \\(\\sigma_0\\) in adfs and record_ln_ev[:, adfs.size:] contains the log-probabilites for each \\(\\sigma_1\\) in blobs.  Note: Every record_ln_ev[i] contains the same 1D array which is evaluated for the entire residue. This 1D array is assigned to each atom of the residue."
  },
  {
    "objectID": "info_molecule.html#atomcollection",
    "href": "info_molecule.html#atomcollection",
    "title": "Molecules",
    "section": "atomcollection",
    "text": "atomcollection\nclass harp.molecule.atomcollection (atomid, resid, resname, atomnamechain, element, conf, xyz, occupancy, bfactor, hetatom, modelnum, authresid=None)\nAn atomcollection object stores all information about the molecular models and the methods to manipulate them in HARP.\n\nAttributes\nThe attributes are named following the PDB naming convention\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\nself.natoms\nint  Number of atoms in the molecule.\n\n\nself.atomid\nnumpy.ndarray  A 1-D int array of size natoms, containing a numerical id for each individual atom in the molecule.\n\n\nself.ind\nnumpy.ndarray  A 1-D int array of size natoms, containing the index for each individual atom in the molecule. Is equal to numpy.arange(natoms). Used internally in HARP for indexing.\n\n\nself.resid\nnumpy.ndarray  A 1-D int array of size natoms, containing a numerical id for the residue for individual atom in the molecule.\n\n\nself.resname\nnumpy.ndarray  A 1-D string array of size natoms, containing the identity of the residue for each individual atom in the molecule (e.g., Gly, Ala, etc.).\n\n\nself.element\nnumpy.ndarray  A 1-D string array of size natoms, containing the element identity for each individual atom in the molecule (e.g., C, H, O, N, etc.).\n\n\nself.atomname\nnumpy.ndarray  A 1-D string array of size natoms, containing the atom identity of each individual atom in a particular residue in the molecule (e.g., CA, CB, N, etc.).\n\n\nself.chain\nnumpy.ndarray  A 1-D string array of size natoms, containing the identity of the chain for each individual atom in the molecule.\n\n\nself.xyz\nnumpy.ndarray  A 2-D double array of size [natoms, 3], containing the Cartesian co-ordinates of each individual atom in the molecule.  Note: This must be a double array!\n\n\nself.occupancy\nnumpy.ndarray  A 1-D double array of size natoms, containing the occupancy for each individual atom in the molecule.\n\n\nself.bfactor\nnumpy.ndarray  A 1-D double array of size natoms, containing the B-factor for each individual atom in the molecule.\n\n\nself.hetatom\nnumpy.ndarray  A 1-D bool array of size natoms, indicating whether the atom is a heteroatom entry.\n\n\nself.authresid\nnumpy.ndarray  A 1-D int array of size natoms, containing the author-provided id for the residue for individual atom in the molecule. Defaults to resid if not provided.\n\n\nself.conf\nnumpy.ndarray  A 1-D string array of size natoms, containing the conformation for individual atom in the molecule.\n\n\nself.modelnum\nnumpy.ndarray  A 1-D int array of size natoms, containing the model number for individual atom in the molecule.\n\n\nself.unique_residues\nnumpy.ndarray  A 1-D int array of the unique resid in the molecule.\n\n\nself.unique_chains\nnumpy.ndarray  A 1-D string array of the unique chain in the molecule.\n\n\nself.unique_confs\nnumpy.ndarray  A 1-D string array of the unique conf in the molecule.\n\n\n\n\n\nFunctions\nThe functions associated with atomcollection are\n\n\n\n\n\n\n\nFunction\nDescrption\n\n\n\n\nself.get_residue\nReturns a particular residue.  Input: int number (the specific resid to be returned).  Output: atomcollection.\n\n\nself.get_chain\nReturns a particular chain.  Input: string chain (the specific chain to be returned).  Output: atomcollection.\n\n\nself.get_chains\nReturns multiple chains.  Input: numpy.ndarray/list chains (the array/list of chain to be returned).  Output: atomcollection.\n\n\nself.get_atomname\nReturns a collection of specific atoms based on their identity in residues.  Input: string atomname (the specific atomname to be returned).  Output: atomcollection.\n\n\nself.get_atomids\nReturns a collection of specific atoms.  Input: numpy.ndarray/list atomids (the array/list of atomid to be returned).  Output: atomcollection.\n\n\nself.get_conformation\nReturns a specific conformation of the model.  Input: string conf (the specifc conf to be returned).  Output: atomcollection.\n\n\nself.dehydrogen\nRemoves hydrogens from self  Input: None.  Output: atomcollection.\n\n\nself.remove_hetatoms\nRemoves heteroatoms from self  Input: None.  Output: atomcollection.\n\n\nself.split_residue\nSplits an atomcollection of a single residue into component parts. For a nucleotide, returns a list of phosphate, sugar, and base. For an amino-acid, returns backbone and sidechain.  Input: None (Note: self must be a single residue!).  Output: A list of atomcollection.\n\n\nself.com\nReturns the Cartesian co-ordinate center-of-mass (centroid) of an atomcollection, i.e. the mean of self.xyz.  Input: None.  Output: A numpy.ndarray of size 3.\n\n\n\nA separate function is involved in loading an atomcollection from a file."
  },
  {
    "objectID": "info_molecule.html#load",
    "href": "info_molecule.html#load",
    "title": "Molecules",
    "section": "load",
    "text": "load\nharp.molecule.load (fname, only_polymers = False, firstmodel = True, authid = False)\n\nArgument\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\nfname\nstring  The filename of the mmCIF file to load.  Note: This function currently only handles the file suffixes .mmcif, .cif, or_ .cif.gz.\n\n\nonly_polymers\nbool  A flag for whether to only use entities labeled as polymers (i.e. not water, ions, metals, or ligands, etc.).\n\n\nfirstmodel\nbool  A flag for whether to take the only first model. Useful for an ensemble of models (e.g., as in NMR).\n\n\nauthid\nbool  A flag for whether to use authid as atomcollection.resid or not. Useful for when people populate the wrong column (e.g., during model building).\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\natomcollection\nContains the molecular model written in the .mmCIF file"
  },
  {
    "objectID": "info_density.html#gridclass",
    "href": "info_density.html#gridclass",
    "title": "Density maps",
    "section": "gridclass",
    "text": "gridclass\nclass harp.density.gridclass (origin, dxyz, nxyz, *args, **kwargs)\nA gridclass object stores the grid defining the voxel locations for a density map.\n\nAttributes\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\nself.origin\nnumpy.ndarray  A 1-D double array of size 3 containing the Cartesian coordinates of the lower corner of the grid.\n\n\nself.dxyz\nnumpy.ndarray  A 1-D double array of size 3 containing the rectilinear spacing between each grid point along all Cartesian axes.\n\n\nself.nxyz\nnumpy.ndarray  A 1-D double array of size 3 containing the number of grid points in each Cartesian direction\n\n\n\n\n\nFunctions\nThe functions associated with gridclass are\n\n\n\n\n\n\n\nFunction\nDescrption\n\n\n\n\nself.xyzmin\nReturns the Cartesian coordinates of the lower corner of the grid (i.e., self.origin).  Input: None.  Output A numpy.ndarray of double values, of size 3.\n\n\nself.xyzmax\nReturns the Cartesian coordinates of the upper corner of the grid (i.e., the one diagonally opposite self.origin).  Input: None.  Output A numpy.ndarray of double values, of size 3.\n\n\nself.com\nReturns the Cartesian coordinates of the center-of-mass of the grid (not weighted by the density).  Input: None.  Output A numpy.ndarray of double values, of size 3.\n\n\nself.grid_ijk()\nReturns an array of the indices of the grid.  Input: None.  Output: A tuple of gx, gy, and gy, which are 1-D numpy.ndarrays of int values, of size self.nxyz[0], self.nxyz[1] and self.nxyz[2], which are the number of gridpoints in the x-, y- and z-direction respectively.\n\n\nself.grid_xyz\nReturns an array of the Cartesian coordinates corresponding to the indices of the grid.  Input: None.  Output: A tuple of gx, gy, and gy, which are 1-D numpy.ndarrays of double values, of size self.nxyz[0], self.nxyz[1] and self.nxyz[2], which are the number of gridpoints in the x-, y- and z-direction respectively."
  },
  {
    "objectID": "info_density.html#load",
    "href": "info_density.html#load",
    "title": "Density maps",
    "section": "load",
    "text": "load\nharp.density.load (fname)\nThis function loads cryoEM densities and the associated grid (file format suffixes supported are .map, .MAP, .mrc, .MRC, .map.gz, and .MAP.gz).\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\nfname\nstring  The file-name for the cryoEM density map.\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The grid of voxel locations of the cryoEM density map.\n\n\ndensity\nnumpy.ndarray  A 3-D array of double values corresponding to the density values at specific voxels corresponding to grid."
  },
  {
    "objectID": "info_density.html#x2i",
    "href": "info_density.html#x2i",
    "title": "Density maps",
    "section": "x2i",
    "text": "x2i\nharp.density.x2i (grid, point)\nThis function transforms a point in Cartesian coordinates to the grid indices based on a particular grid.\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The cryoEM grid which the Cartesian coordinates will be transformed with respect to.\n\n\npoint\nnumpy.ndarray  An array of double values of size 3, containing the Cartesian coordinates of the point.\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\npoint\nnumpy.ndarray  An array of int values of size 3, containing the grid indices of the point."
  },
  {
    "objectID": "info_density.html#i2x",
    "href": "info_density.html#i2x",
    "title": "Density maps",
    "section": "i2x",
    "text": "i2x\nharp.density.i2x (grid, point)\nThis function transforms a point in grid indices to Cartesian coordinates based on a particular grid.\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The cryoEM grid which the grid indices will be transformed with respect to.\n\n\npoint\nnumpy.ndarray  An array of int values of size 3, containing the grid indices of the point.\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\npoint\nnumpy.ndarray  An array of double values of size 3, containing the Cartesian coordinates of the point."
  },
  {
    "objectID": "info_density.html#subgrid_center",
    "href": "info_density.html#subgrid_center",
    "title": "Density maps",
    "section": "subgrid_center",
    "text": "subgrid_center\nharp.density.subgrid_center (grid, centerxyz, halfwidthxyz)\nThis function defines and returns a cubic subgrid within a specific gridclass object centered at the specified point and with a specified half-width in every direction from that point.\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The cryoEM grid in which the subgrid will be defined\n\n\ncenterxyz\nnumpy.ndarray  An array of double values of size 3, containing the Cartesian coordinates of the center of the subgrid.\n\n\nhalfwidthxyz\nnumpy.ndarray  An array of double values of size 3, containing the halfwidths of the subgrid from the center (in \\(\\unicode{x212B}\\)).\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\nA gridclass object containing the defined subgrid."
  },
  {
    "objectID": "info_density.html#subgrid_extract",
    "href": "info_density.html#subgrid_extract",
    "title": "Density maps",
    "section": "subgrid_extract",
    "text": "subgrid_extract\nharp.density.subgrid_extract (grid, data, subgrid)\nThis function extracts the cryoEM density from a map for the voxels corresponding to a cubic subgrid within a specific grid.\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The cryoEM grid associated with the cryoEM map.\n\n\ndata\nnumpy.ndarray  The cryoEM density values defined at the voxel locations in grid.\n\n\nsubgrid\ngridclass  The subgrid defined on grid for which the densities will be extracted.\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ndata\nnumpy.ndarray  The cryoEM density values defined at the voxel locations in subgrid."
  },
  {
    "objectID": "info_density.html#trim_density_to_mol",
    "href": "info_density.html#trim_density_to_mol",
    "title": "Density maps",
    "section": "trim_density_to_mol",
    "text": "trim_density_to_mol\nharp.density.trim_density_to_mol (grid, data, mol, pad = 8.)\nThis function finds the box that emcompasses the atomic coordinates of a specific molecular model on the grid for a specified density map and returns a trimmed grid and associated density map corresponding to this box. The trimmed box may additionally be padded isotropically by a constant value using periodic boundary condtions. This truncation is particularly useful for maps where only a small region has been used to build a model (which commonly occurs for molecules with high rotational symmetry) as it greatly reduces the computational cost of HARP calculations in these cases.\n\nArguments\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The cryoEM grid associated with the cryoEM map.\n\n\ndata\nnumpy.ndarray  The cryoEM density values defined at the voxel locations in grid.\n\n\nmol\nharp.molecule.atomcollection  The molecular model that is built using part of the the cryoEM densities in data at voxel locations specified in grid.\n\n\npad\ndouble  A constant length (in \\(\\unicode{x212B}\\)) that is added to the box encompassing mol that is padded using peridic boundary conditions. The default value is 8.\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\nVariable\nDescrption\n\n\n\n\ngrid\ngridclass  The grid trimmed to the box around mol.\n\n\ndata\nnumpy.ndarray  The cryoEM densities at the voxel locations specified by the trimmed grid."
  }
]